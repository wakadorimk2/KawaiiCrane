= Webアプリケーション
Webアプリケーションってそもそも何でしょうか．例えば普段から見ている動画サイト，SNS，ニュースサイトなどがそうです．動画サイトの場合は配信者が動画を作って投稿し，閲覧する人はそれを見たり評価したりします．SNSでは発信者が写真や呟きを投稿し，閲覧する人はそれを見たりコメントを付けたりします．

これは動画や投稿を集積しユーザが見ることのできる仕組みが，Webアプリケーション（以下Webアプリ）の開発者によって整備されてるために可能になっています．

//image[overview][Webアプリの例 : SNS]{
//}

作り方は色々あるのですが例えば，１）ユーザが投稿や閲覧をするインタフェースとなるフロントエンド，２）フロントエンドが取得した投稿やユーザアカウントを管理したり保存したりするバックエンド，３）投稿やユーザアカウントを蓄積しておくデータベース，４）Webアプリを公開するためのコンピュータ，の４つを作成することでWebアプリを作成できます．本章ではそれらに関してSNSを例に挙げながら説明します．

== フロントエンド
Webアプリとユーザとのインタフェースとなる部分です．SNSで例えると呟きを投稿する時に押すボタンや，タイムラインを表示する機能そのものを指します．
ボタンやアニメーションなどよく使われる部品が用意されているため、フロントエンドが使いやすいです．

方法は以下の３つです．筆者が使いやすいと思う順番に並べています．

 * Vue.jsやAngularなどのJavaScriptフレームワーク
 * JavaScript
 * HTML

実はどの方法を使っても，ユーザが閲覧するものはHTMLのコードです．使いやすい理由は，HTMLのことは考えずに自動生成してしまおうという発想が共通しているためです．
JavaScriptを書くことでHTMLが生成されたり，Vue.jsを書くことでJavaScriptやHTMLを含め生成されたりします．
これによってユーザが見える仕組みであるHTMLの部分を考えず，自分はWebアプリを作るロジックに集中できるのです．

１つ目のJavaScriptフレームワークは多くの種類が存在しますが，簡単な記述方式を採用しJavaScriptのコードを自動的に生成する，というコンセプトは共通しています．
２つ目のJavaScriptはWebアプリにおいて動的@<fn>{dynamic}な動作を実現するために使われる言語です．
３つ目のHTMLはマークアップ言語と呼ばれています．ここで重要なのはChromeやFirefoxといった一般的なブラウザに対応していることです．

//footnote[dynamic][ユーザの操作に応じてその場でHTMLを書き換えること．例:SNSのタイムラインを更新する時など]


== バックエンド
Webアプリと開発者のインタフェースになる部分です．SNSで例えると投稿された呟きを保存したり，ユーザアカウントを管理したりする機能を指します．
フロントエンドがユーザの相手をしながら，バックエンドが投稿やアカウントの管理を担当します．

方法は以下の３つです．

 * Flaskに代表されるPythonライクなWebアプリケーションフレームワーク
 * Node.jsに代表されるJavaScriptフレームワーク
 * Ruby on Railsなどその他のフレームワーク

どの方法にも共通するのが，バックエンドに限定しない汎用的な言語であることです．
Pythonは機械学習などに利用される言語，JavaScriptはフロントエンドにも使われる言語，
Rubyは日本人が発明したことで有名な言語です．

汎用的な言語であれば開発者の確保が容易になるのだと，個人的に考えています．
Webアプリに詳しくなくても汎用的な言語に詳しい人ならバックエンドを開発できますし，
逆にバックエンドで汎用的な言語を習得した人はWebアプリ以外の開発にも応用が効きます．

== データベース
Webアプリで発生したデータを保存する部分です．SNSで例えると投稿された呟きやユーザアカウントなどのデータを蓄積します．
そこでよく使われる技術がデータベースです．データベースはデータを整理整頓して後から見やすい状態にしておく処理に長けています．

方法は以下の３つです．

 * MySQLに代表されるSQL DB
 * MongoDBやRedisなどのNoSQL DB
 * WindowsやMacのファイルシステム

データベースの話題で頻繁に登場する考え方がSQLです．
これはデータを表形式で記憶しておいて，行と列を指定することでいつでも参照できるようにしようという考え方です．

SQLの参照方法だとアクセスが遅いなど色々問題が出てきたので，それを解決するために出てきた手法がNoSQLの考え方です．
逆にこちらは参照を行に限定したり，行に限定した上で行に複雑なデータを持たせたりして，アクセス速度を向上しています．

== アプリの公開
Webアプリをコンピュータ上に置き，ユーザがアクセスできる状態にする部分です．SNSで例えると全世界の人がいつでもアクセスできる状態を指します．
コンピュータを自前か借りるかで大別されますが，Webアプリの場合は借りる方が楽です．

方法は以下の４つです．上の方法ほど借りる度合いが大きいです．

 * アプリを実装するPaaS (Platform as a Service)
 * IaaS (Infrastructure as a Service)
 * オンプレミス

Webアプリを自分や他の人のスマホからアクセスするには，アプリをインターネット上のサーバに置く必要があります．
開発している最中は，開発場所になっているパソコンそのものの上で実行とアクセスをすれば良いのですが，
アプリを公開するとなるとメンテナンスやセキュリティの面で問題が出てきます．

そこで専用のサーバを買ってくるか，誰かのサーバを借りることになります．ここは手間の少ないサーバを借りる方法で行きましょう．
2020年現在では，便利なことにクラウドサービスが発達しています．パソコンを借りる時は素直に考えると，N人のアクセスが予想される時，N人分の計算リソースを用意する必要があるからM台必要だ，という考えになりそうです．
しかしクラウドサービスでは，インスタンスという単位で計算リソースを借りることが出来て分かりやすい上に，もしアクセスが増えた時に一時的に計算リソースを借り増しするというスケーラビリティまで自動的にコントロールしてくれるようになっています．