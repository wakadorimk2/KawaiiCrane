= Webアプリケーション
Webアプリケーションってそもそも何でしょうか。例えば普段から見ている動画サイト、SNS、ニュースサイトなどがそうです。動画サイトの場合は配信者が動画を作って投稿し、閲覧する人はそれを見たり評価したりします。SNSでは発信者が写真や呟きを投稿し、閲覧する人はそれを見たりコメントを付けたりします。

これは動画や投稿を集積しユーザが見ることのできる仕組みが、Webアプリケーション（以下Webアプリ）の開発者によって整備されてるために可能になっています。

//image[overview][Webアプリの例 : SNS]{
//}

作り方は色々あるのですが例えば、１）ユーザが投稿や閲覧をするインタフェースとなるフロントエンド、２）フロントエンドの動作に必要なコンテンツを取得したり保存したりするバックエンド、３）バックエンドが取り出すコンテンツを蓄積しておくデータベース、の３つを作成することでWebアプリを作成できます。本章ではそれらに関してSNSを例に挙げながら説明します。

== フロントエンド
Webアプリを作るときに、ユーザとのインタフェースとなる部分です。
アプリを除けばほとんどのユーザはWebブラウザを経由して閲覧するので、それを前提にしているものが殆どだと思います。
選択肢としては以下のようなものがあります。筆者が使いやすいと思う順番に並べています。

 * Vue.jsやAngularなどのJavaScriptフレームワークを使う
 * JavaScriptを書く
 * HTMLを書く

実はどの方法を使っても、最終的にユーザが見るものはHTMLのデータです。
ただ異なるのは独自の分かりやすい記述方式を定め、HTMLのことは考えずに自動生成してしまおうという発想です。
JavaScriptを書くことでHTMLが生成されたり、Vue.jsを書くことでJavaScriptやHTMLを含め生成されたりします。
これによってユーザが見える仕組みであるHTMLの部分を考えず、自分はWebアプリを作るロジックに集中できるのです。

== バックエンド
Webアプリを作るときに、開発者とのインタフェースになると言える技術です。
アプリへのアクセスが増えた場合、ユーザが何をしているのか、ユーザの特徴は何なのかというデータを知りたいですよね。
それを知ることでより適切な仕組みへアプリを改善できますから。

そういったデータを格納するにはパソコン上のファイルに書き出せば良いわけですが、
HTMLやJavaScriptと言ったフロントエンドの言語の得意分野ではありません。
そこで登場するのがバックエンド技術です。以下に例を示します。

 * Flaskに代表されるPythonライクなWebアプリケーションフレームワーク
 * Node.jsに代表されるJavaScriptフレームワーク
 * Ruby on Railsなどその他のフレームワーク

どの技術にも共通するのが、バックエンドに特化した技術ではないことです。
Pythonは機械学習などに利用されるスクリプト言語、JavaScriptは長い間使われているWeb言語、
Rubyは日本人が開発したことで有名なプログラミング言語です。

そういった一般的なプログラミング言語であれば開発者の確保が容易になるのだと、個人的に考えています。
Webに詳しくなくてもその言語に詳しい人ならバックエンドを開発できますし、
逆にバックエンドで言語を習得した人はWebアプリ以外の開発にも応用が効きます。

== データベース
Webアプリを作るときに、投稿されたテキストや登録されたユーザアカウントなど、集まったデータをどう管理しようかと考えます。
そこで最適な技術がデータベースです。データベースはデータを構造化することで再利用性を高めます。
典型的にはユーザのデータを集めておいて、各人に合わせたサービスを提供することが考えられます。

データの管理方法には大きく分けて3種類あります。
 * MySQLに代表されるSQL DB
 * MongoDBやRedisなどのNoSQL DB
 * WindowsやMacのファイルシステム

データベースの話題で頻繁に登場し、軸となる考え方がSQLです。
これはデータを表形式で記憶しておいて、行と列を指定することでいつでも参照できるようにしようという発想です。

SQLの参照方法だとアクセスが遅いなど色々問題が出てきたので、それを解決するために出てきた手法がNoSQLの考え方です。
逆にこちらは参照を行に限定したり、行に限定した上で行に複雑なデータを持たせたりして、主にアクセス速度を速くしようという発想です。

== アプリの公開
作ったWebアプリケーションを自分や他の人のスマホからアクセスするには、アプリをインターネット上のサーバに置く必要があります。
開発している最中は、開発場所になっているパソコンそのものの上で実行とアクセスをすれば良いのですが、
アプリを公開するとなるとメンテナンスやセキュリティの面で問題が出てきます。

そこで専用のサーバを買ってくるか、誰かのサーバを借りることになります。ここは手間の少ないサーバを借りる方法で行きましょう。
2020年現在では、便利なことにクラウドサービスが発達しています。パソコンを借りる時は素直に考えると、N人のアクセスが予想される時、N人分の計算リソースを用意する必要があるからM台必要だ、という考えになりそうです。
しかしクラウドサービスでは、インスタンスという単位で計算リソースを借りることが出来て分かりやすい上に、もしアクセスが増えた時に一時的に計算リソースを借り増しするというスケーラビリティまで自動的にコントロールしてくれるようになっています。